version: 2.1

orbs:
  docker: circleci/docker@0.5.20

# Parameters are available to all elements of config.yml, use them like this `pipeline.parameters.PARAMETER`
parameters:
  AUDITCI_LEVEL:
    type: string
    default: 'moderate'
  MODULE_PATH:
    type: string
    default: 'api/'    
  TESTS_PATH:
    type: string
    default: 'tests/'
  TESTS_IMAGE:
    type: string
    default: 'jahia/personal-api-tokens'
  SONARQUBE_PROJECT:
    type: string
    default: 'jahia/personal-api-tokens'    

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  # Checkout and Initializes the testing framework
  # This job is there to prepare the repo for the next steps
  initialize:
    <<: *workdir
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-{{ checksum "<< pipeline.parameters.TESTS_PATH >>yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            cd << pipeline.parameters.TESTS_PATH >>
            yarn
      - save_cache:
          key: v1-npm-{{ checksum "<< pipeline.parameters.TESTS_PATH >>yarn.lock" }}
          paths:
            - << pipeline.parameters.TESTS_PATH >>node_modules
      - *persist-workspace

  # Lint the project or any other static code analysis
  # This action should run in parrallel, failed linting should trigger an error but should not stop execution of the tests
  # Ideally this should lint both the module codebase and the test codebase, we want to fail on warning (it is up the the 
  # team to either fix the warning, ignore the warning, or modify the ruleset so that this warnning doesn't happen again)
  lint:
    docker:
      - image: circleci/node:latest
    working_directory: ~/source/integrationTests
    steps:
      - *attach-workspace
      - run:
          name: Yarn lint tests
          command: |
            cd << pipeline.parameters.TESTS_PATH >>
            yarn run lint --max-warnings 1
      # - run:
      #     name: Yarn lint module
      #     command: |
      #       cd << pipeline.parameters.MODULE_PATH >>
      #       yarn run lint --max-warnings 1     
            
  # Run security checks
  # Security checks on the project are used to validate that we don't use any problematic javascript libraries
  # It is using audit-ci by IBM (https://github.com/IBM/audit-ci)
  security:
    <<: *workdir
    docker:
      - image: circleci/node:latest
    steps:
      - *attach-workspace
      - run:
          name: Install dependencies
          command: sudo npm install -g audit-ci
      - run:
          name: Run Audit-ci on tests
          command: |
            cd << pipeline.parameters.TESTS_PATH >>
            audit-ci --<< pipeline.parameters.AUDITCI_LEVEL >>
      # - run:
      #     name: Run Audit-ci on module
      #     command: |
      #       cd << pipeline.parameters.MODULE_PATH >>
      #       audit-ci --<< pipeline.parameters.AUDITCI_LEVEL >>            

  # Build the module and save it locally
  # We're saving the artifacts that are then used later on to execute the tests 
  # The artifacts are also stored and made available through circleci UI if further investigations are necessary 
  build:
    <<: *workdir
    docker: 
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run: mvn -s .circleci/.circleci.settings.xml clean install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      # Environment provisioning is sometimes dependent upon dependencies build during mvn clean install
      # This step copies those dependencies and make them available for further actions, 
      # such as being used to provision a running Jahia with a set of freshly built artifacts
      - run: mvn -s .circleci/.circleci.settings.xml dependency:copy-dependencies
      - run:
          name: Prepare artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
            cp /home/circleci/source/target/*SNAPSHOT.jar /home/circleci/source/target/personal-api-tokens-SNAPSHOT.jar
            if [[ -e /home/circleci/source/build-dependencies ]]; then
              cp -r /home/circleci/source/build-dependencies /tmp/artifacts/
            fi            
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  # This job publish the artifact to nexus by calling the deploy command
  # It is only executed when merging into master (after successful PR execution)
  publish:
    <<: *workdir
    docker: 
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -s .circleci/.circleci.settings.xml clean install deploy

  # This job runs the integration tests
  # It is fully containerized.
  # Node that we might want to migrate it to Docker executor down the road
  # It is aimed at being called by matrix jobs (in the workflow section)
  integration_tests:
    <<: *workdir
    machine: true
    # Available types: medium, large, xlarge, 2xlarge https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
    resource_class: xlarge
    parameters:
      TESTRAIL_MILESTONE:
        type: string
        default: Default
      JAHIA_IMAGE:
        type: string
      JAHIA_CONTEXT:
        type: string
      MANIFEST:
        type: string
      TOOLS_USER:
        type: string
        default: jahia
      TOOLS_PWD:
        type: string
        default: password
      SKIP_TESTRAIL:
        type: string
        default: ""
      SKIP_ARTIFACTS:
        type: boolean
        default: true
      RUN_TESTSIMAGE:
        type: string
        default: << pipeline.parameters.TESTS_IMAGE >>:latest        
      BUILD_TESTSIMAGE:
        type: boolean
        default: false
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Prepare artifcats
          # This command copy the various build artifacts into the /tests/ folder to be later 
          # used by jahia-cli to provision Jahia for testing
          command: |
            if [ << parameters.SKIP_ARTIFACTS >> == false ]; then
              mkdir << pipeline.parameters.TESTS_PATH >>artifacts
              mkdir << pipeline.parameters.TESTS_PATH >>artifacts/reports
              mkdir << pipeline.parameters.TESTS_PATH >>build-dependencies
              if [[ -e /home/circleci/source/build-dependencies ]]; then
                sudo cp -r /home/circleci/source/build-dependencies/* << pipeline.parameters.TESTS_PATH >>build-dependencies/
              fi               
              sudo cp -r /home/circleci/source/target/* << pipeline.parameters.TESTS_PATH >>artifacts/
            fi
      - run:
          name: Docker login
          # This is needed to fetch private docker images (such as Jahia snapshot)
          command: |
            echo "$DOCKERHUB_LOGIN"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
      - run:
          name: Spin-up dockerized jahia
          # At that point we're only sprinning up Jahia and its runtime dependencies, 
          # We are not starting the tests yet since we first want to build the test container (or run from a previously built container) \
          # Checking the presence of the .env file is there because it's needed by the tests, but to not break ci/cd if variables
          #   are added to the compose file but not to the environment variables in circleci config.yml
          command: |
            set -e
            cd << pipeline.parameters.TESTS_PATH >>
            if [ [[ -e .env ]] == false ]; then
              mv .env.sample .env
            fi            
            docker-compose -f docker-compose-ci.yml up -d jahia
          no_output_timeout: 2h
          environment:
            MANIFEST: << parameters.MANIFEST >>
            JAHIA_IMAGE: << parameters.JAHIA_IMAGE >>
            TESTS_IMAGE: << parameters.RUN_TESTSIMAGE >>
            JAHIA_HOST: jahia
            JAHIA_PORT: 8080
            JAHIA_CONTEXT:
            TEST_URL: http://jahia:8080/modules/graphql
            JAHIA_USERNAME: root
            JAHIA_PASSWORD: root
            # JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/js-test-results.xml
            # KARAF_CONSOLE_PORT: 8101
      - run:
          # We want to build the test image from scratch with any code change (since that code change could be in the tests themselves)
          name: Build << pipeline.parameters.TESTS_IMAGE >> image
          command: |
            if [ << parameters.BUILD_TESTSIMAGE >> == true ]; then
              cd << pipeline.parameters.TESTS_PATH >>
              docker build -t << pipeline.parameters.TESTS_IMAGE >> .
              docker save -o tests_image.tar << pipeline.parameters.TESTS_IMAGE >>
            fi
      - run:
          name: Execute tests
          # Running the tests, note that the reports are copied at the end of execution
          # We don't need (nor want) this actual step to fail
          # Failure is determined by counting the number of failed tests in the output report
          command: |
            set -e
            cd << pipeline.parameters.TESTS_PATH >>
            docker-compose -f docker-compose-ci.yml up e2e-tests
            docker cp e2e-tests:/tmp/reports << pipeline.parameters.TESTS_PATH >>artifacts/tests_reports
          no_output_timeout: 2h
          environment:
            MANIFEST: << parameters.MANIFEST >>
            JAHIA_IMAGE: << parameters.JAHIA_IMAGE >>
            TESTS_IMAGE: << parameters.RUN_TESTSIMAGE >>
            JAHIA_HOST: jahia
            JAHIA_PORT: 8080
            JAHIA_CONTEXT:
            TEST_URL: http://jahia:8080/modules/graphql
            JAHIA_USERNAME: root
            JAHIA_PASSWORD: root
            # JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/js-test-results.xml
            # KARAF_CONSOLE_PORT: 8101
      - run:
          name: Export jahia logs
          command: |
            set -e
            cd << pipeline.parameters.TESTS_PATH >>
            docker logs jahia > << pipeline.parameters.TESTS_PATH >>artifacts/reports/jahia.log
      - run:
          name: Analyze Test results
          # This looks at the report and fail the job if one of the test has failed
          command: |
            if [ $(cat << pipeline.parameters.TESTS_PATH >>artifacts/reports/*.json | jq ' select(.stats.failures > 0) | length' | wc -l) -gt 0 ]; then
              echo "More than one failure found, sending exit signal"
              exit 1
            fi
      - store_test_results:
          path: << pipeline.parameters.TESTS_PATH >>artifacts/reports
      - unless:
          condition: << parameters.SKIP_TESTRAIL >>
          steps:
              - run:
                  name: Publish results to testrail
                  when: always
                  command: |
                    set +e
                    export NVM_DIR="/opt/circleci/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                    nvm install v12
                    nvm alias default v12
                    npm install -g jahia-testrail-reporter
                    jahia-testrail-reporter << pipeline.parameters.TESTS_PATH >>artifacts/reports $TESTRAIL_USERNAME $TESTRAIL_PASSWORD -n="Peronal API Tokens" -m=<< parameters.TESTRAIL_MILESTONE >> -d="This test was executed on circleci, $CIRCLE_BUILD_URL"
      - *persist-workspace

  # We also want the test image to be versioned and published to Docker Hub whenever a new tag is created 
  # This would allow us to re-use a test image whenever we want to test with an earlier version of the module
  docker-publish:
    docker:
      - image: circleci/openjdk:8-jdk-stretch-browsers
    steps:
      - *attach-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << pipeline.parameters.TESTS_IMAGE >> image to docker hub
          command: |
            cd << pipeline.parameters.TESTS_PATH >>
            docker load -i tests_image.tar
            if [ "$CIRCLE_BRANCH" = "master" ]; then
                IMAGE_TAG=latest
            else
                IMAGE_TAG=${CIRCLE_TAG/''}
            fi
            echo "Image tag is: $IMAGE_TAG"
            docker tag << pipeline.parameters.TESTS_IMAGE >>:latest << pipeline.parameters.TESTS_IMAGE >>:$IMAGE_TAG
            docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASSWORD
            echo "Tagged the image"
            docker push << pipeline.parameters.TESTS_IMAGE >>:$IMAGE_TAG
            echo "Pushed tag"

  # sonar:
  #   parameters:
  #     circleci-pr:
  #       type: string
  #       default: CIRCLE_PULL_REQUEST
  #     is_pull_request:
  #       type: boolean
  #       default: false 
  #   <<: *workdir
  #   docker: # run the steps with Docker
  #     - image: circleci/openjdk:11-jdk-stretch
  #   resource_class: large
  #   steps:
  #     - *attach-workspace
  #     - checkout
  #     - run:
  #         name: Git custom command to fix circle-ci checkout for sonar analysis
  #         command: |
  #           git fetch --all
  #           git branch -D master
  #           git rev-parse origin/master
  #     - restore_cache:
  #         keys:
  #           - sonar-dependencies-{{ checksum "pom.xml" }}
  #           # Fallback if no exact match found
  #           - sonar-dependencies-
  #     - when:
  #         condition: CIRCLE_BRANCH !== 'master'
  #         steps:
  #           - run:
  #               name: Analyze pull request with sonar
  #               command: |
  #                 mvn -s .circleci/.circleci.settings.xml sonar:sonar \
  #                 -Dsonar.projectKey=<< pipeline.parameters.SONARQUBE_PROJECT >> \
  #                 -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
  #                 -Dsonar.pullrequest.key=${<< parameters.circleci-pr >>##*/} \
  #                 -Dsonar.pullrequest.base=master \
  #                 -Dsonar.pullrequest.github.repository=$CIRCLE_REPOSITORY_URL
  #     - unless:
  #         condition: CIRCLE_BRANCH === 'master'
  #         steps:
  #           - run:
  #               name: Sonar analysis
  #               command: |
  #                 if [[ "${CIRCLE_BRANCH}" == "master" ]];
  #                 then
  #                   mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.projectKey=<< pipeline.parameters.SONARQUBE_PROJECT >>
  #                 else
  #                   mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.branch.name=$CIRCLE_BRANCH
  #                 fi              
  #     - save_cache:
  #         paths:
  #           - ~/.m2
  #         key: sonar-dependencies-{{ checksum "pom.xml" }}

workflows:
  version: 2
  # On code change is executed each time new code is pushed to a branch
  # Current project configuration in circleci only builds on PR + master, so effectively this is only being executed
  on-code-change:
    jobs:
      - initialize
      - lint:
          requires:
            - initialize
      - security:
          requires:
            - initialize
      - build:
          context: QA_ENVIRONMENT
          requires:
            - initialize
      # - sonar:
      #     context: QA_ENVIRONMENT
      #     requires:
      #       - build
      #     is_pull_request: true
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - sonar:
      #     context: QA_ENVIRONMENT
      #     requires:
      #       - build
      #     is_pull_request: false
      #     filters:
      #       branches:
      #         only:
      #           - master
      - publish:
          context: QA_ENVIRONMENT
          requires:
            - build
          filters:
            branches:
              only:
                - master                
      # Verifies that the new code works with the latest released version of Jahia
      - integration_tests:
          name: 'Int. Tests - Jahia Latest - Built modules'
          requires:
            - build
          context: QA_ENVIRONMENT
          #Using Aliases here (8 is the latest of the 8 tree, 8.1 is the latest of the tree, ...)
          JAHIA_IMAGE: jahia/jahia-dev:8 
          RUN_TESTSIMAGE: << pipeline.parameters.TESTS_IMAGE >>:latest
          JAHIA_CONTEXT:
          TOOLS_USER: root
          TOOLS_PWD: root
          MANIFEST: warmup-manifest-build.yml
          TESTRAIL_MILESTONE: Jahia-Latest
          SKIP_TESTRAIL: "true"
          SKIP_ARTIFACTS: false
          BUILD_TESTSIMAGE: true
      - docker-publish:
          context: QA_ENVIRONMENT
          requires:
            - Int. Tests - Jahia Latest - Built modules
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master

  # The objective of nightly runs is to ensure the codebase still passes tests:
  # - With the latest releases version of Jahia
  # - With the current snapshot of Jahia
  nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - initialize
      - integration_tests:
          matrix:
            parameters:
              JAHIA_IMAGE: ["jahia/jahia-private:snapshot", "jahia/jahia-dev:8"]
              RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
              MANIFEST: ["warmup-manifest-snapshot.yml"]
              JAHIA_CONTEXT: [""]
              TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
              TOOLS_USER: ["root"]
              TOOLS_PWD: ["root"]
          name: Nightly-<< matrix.JAHIA_IMAGE >>
          context: QA_ENVIRONMENT
          requires:
            - initialize

  # Monthly, we run the integration testing suite with older (but still supported) versions of Jahia and set versions of the module:
  # This provides a reference point (when was the latest time this was tested)
  # In this section we want to see set Jahia versions (not aliases)
  monthly:
    triggers:
      - schedule:
          cron: '0 0 1 * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - initialize
      # - integration_tests:
      #     matrix:
      #       parameters:
      #         JAHIA_IMAGE: ["jahia/jahia-dev:8.0.1.0"]
      #         RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
      #         MANIFEST: ["warmup-manifest-snapshot.yml"]
      #         JAHIA_CONTEXT: [""]
      #         TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
      #         TOOLS_USER: ["root"]
      #         TOOLS_PWD: ["root"]
      #     name: Monthly-<< matrix.JAHIA_IMAGE >>-with-ES-<< matrix.ELASTICSEARCH_VERSION >>
      #     context: QA_ENVIRONMENT
      #     requires:
      #       - initialize
